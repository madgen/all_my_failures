#!/usr/bin/env ruby
# frozen_string_literal: true

require 'all_my_failures'
require 'all_my_failures/session'

require 'optparse'
require 'find'
require 'English'

session_options = {}
program_options = { keep: {} }

option_parser = OptionParser.new do |opts|
  opts.banner = "usage: #{AllMyFailures::PROGRAM_NAME} <input_file> <command>"
  opts.separator ''
  opts.separator 'Specific options:'

  opts.on('-r',
          '--regexp REGEXP',
          Regexp,
          'Regular exp. to filter files instead of giving a file list') do |r|
    program_options[:file_regexp] = r
  end

  opts.on('-n',
          '--threads THREAD_COUNT',
          Integer,
          'Number of cores used (default: all)') do |n|
    session_options[:n_of_threads] = n
  end

  opts.on('-t',
          '--timeout SECS',
          Integer,
          'Timeout threshold (default: 60s)') do |t|
    session_options[:timeout] = t
  end

  [:success, :failure].each do |outcome|
    [:output, :target].each do |data_type|
      opts.on("--keep-#{outcome}-#{data_type}s FILE",
              String,
              "File to keep #{outcome} #{data_type}s") do |f|
        program_options[:keep][outcome] ||= {}
        program_options[:keep][outcome][data_type] = f
      end
    end
  end

  opts.on('-h', '--help', 'Display this message') do
    puts opts
    exit
  end
end

option_parser.parse!(ARGV)

unless (program_options[:file_regexp] && [1, 2].include?(ARGV.size)) ||
       ARGV.size == 2
  STDERR.puts option_parser.banner
  exit 1
end

INPUT_FILES =
  if program_options[:file_regexp]
    input_list_path = ARGV.size == 2 ? ARGV[0] : Dir.pwd

    if !File.exist? input_list_path
      STDERR.puts "Base for file search at '#{input_list_path}' doesn't exist."
      exit 1
    elsif !File.directory? input_list_path
      STDERR.puts "Base for file search at '#{input_list_path}' is not a"\
        'directory.'
      exit 1
    end

    input_files = []
    Find.find(input_list_path) do |path|
      # Ignore the GIT directory.
      Find.prune if File.directory?(path) && File.basename(path) == '.git'

      input_files << path if path =~ program_options[:file_regexp]
    end

    input_files.freeze
  else
    input_list_path = ARGV[0]
    if !File.exist? input_list_path
      STDERR.puts "Input list at '#{input_list_path}' doesn't exist."
      exit 1
    elsif !File.file? input_list_path
      STDERR.puts "Input list at '#{input_list_path}' is not a file."
      exit 1
    end

    IO.readlines(input_list_path).map(&:chomp).freeze
  end
program_options.delete(:file_regexp)

COMMAND = ARGV.last

session = Session.new INPUT_FILES, COMMAND, session_options

AllMyFailures.run session, program_options
